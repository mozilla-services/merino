# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER    - login info for docker hub
# DOCKER_PASS

version: 2.1

workflows:
  version: 2
  pr-workflow:
    jobs:
      - checks: &pr-filters
          filters:
            branches:
              ignore: main
      - build-and-test:
          <<: *pr-filters
      - docs-build:
          <<: *pr-filters
      - docker-image-build:
          <<: *pr-filters
      - contract-tests:
          <<: *pr-filters
          requires:
            - checks
            - build-and-test
            - docker-image-build

  main-workflow:
    jobs:
      - checks: &main-filters
          filters:
            branches:
              only: main
      - build-and-test:
          <<: *main-filters
      - docs-build:
          <<: *main-filters
      - docs-publish-github-pages:
          <<: *main-filters
          requires:
            - docs-build
      - docker-image-build:
          <<: *main-filters
      - contract-tests:
          <<: *main-filters
          requires:
            - checks
            - build-and-test
            - docker-image-build
      - docker-image-publish-stage:
          <<: *main-filters
          requires:
            - checks
            - build-and-test
            - docker-image-build
            - contract-tests
      # The following job will require manual approval in the CircleCI web application.
      # Once provided, and when all the requirements are fullfilled (e.g. tests)
      - unhold-to-deploy-to-prod:
          <<: *main-filters
          type: approval
          requires:
            - checks
            - build-and-test
            - docker-image-build
            - contract-tests
      # On approval of the `unhold-to-deploy-to-prod` job, any successive job that requires it
      # will run. In this case, it's manually triggering deployment to production.
      - docker-image-publish-prod:
          <<: *main-filters
          requires:
            - unhold-to-deploy-to-prod

jobs:
  checks:
    docker:
      - image: cimg/rust:1.63
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - setup-rust-check
      - rust-check

  build-and-test:
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202101-01 # Ubuntu 20.04, Docker v20.10.2, Docker Compose v1.28.2
    working_directory: ~/merino
    steps:
      - run:
          name: Install dependencies
          command: |
            curl https://sh.rustup.rs | sh -s -- --no-modify-path --default-toolchain stable -y;
      - checkout
      - run:
          name: Setting up development dependencies
          command: |
            docker-compose --version
            sudo chown 1000:1000 dev/.kinto-attachments
            docker-compose -f dev/docker-compose.yaml up
          background: true
      - write-version
      - run:
          name: cargo build
          command: ~/.cargo/bin/cargo build
      - run:
          name: Wait for docker-compose dependencies
          command: ./dev/wait-for-it.sh --host=localhost --port=8888 --timeout=60 --strict -- true
      - run:
          name: cargo test
          command: ~/.cargo/bin/cargo test --all --verbose

  docker-image-build:
    docker:
      - image: mozilla/cidockerbases:docker-latest

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - write-version
      - run:
          name: Docker planner stage
          command: docker build --tag app:planner --target planner .
      - run:
          name: Copy recipe.json to artifacts
          command: |
            mkdir -p /tmp/artifacts
            docker run --rm app:planner cat recipe.json > /tmp/artifacts/recipe.json
            sha256sum /tmp/artifacts/recipe.json
      - run:
          name: Docker dependency cacher stage
          command: docker build --tag app:builder --target cacher .
      - run:
          name: Docker builder stage
          command: docker build --tag app:builder --target builder .
      - run:
          name: Docker runtime stage
          command: docker build --tag app:runtime --target runtime .
      - run:
          name: Save image into workspace
          command: |
            mkdir -p /tmp/workspace
            docker save -o /tmp/workspace/merino.tar app:runtime
            gzip /tmp/workspace/merino.tar
      - persist_to_workspace:
          root: /tmp/workspace
          paths:
            - merino.tar.gz
      - store_artifacts:
          path: /tmp/artifacts

  contract-tests:
    machine:
      docker_layer_caching: true
      image: ubuntu-2004:202101-01 # Ubuntu 20.04, Docker v20.10.2, Docker Compose v1.28.2
    working_directory: ~/merino
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - dockerhub-login
      - run:
          name: Load Docker image from workspace
          command: docker load -i workspace/merino.tar.gz
      - run:
         name: Run contract tests
         command: |
           docker-compose --version
           sudo chown 1000:1000 test-engineering/contract-tests/kinto-attachments
           docker-compose -f test-engineering/contract-tests/docker-compose.yml build client kinto-setup
           docker-compose -f test-engineering/contract-tests/docker-compose.yml up --abort-on-container-exit

  docker-image-publish-stage:
    docker:
      - image: mozilla/cidockerbases:docker-latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - skip-if-do-not-deploy
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - dockerhub-login
      - run:
          name: Load Docker image from workspace
          command: docker load -i workspace/merino.tar.gz
      - run:
          name: Push to Docker Hub
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              DOCKER_TAG="${CIRCLE_SHA1}"
            fi

            if [ -n "${DOCKER_TAG}" ]; then
              echo ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker tag app:runtime ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker images
              docker push "${DOCKERHUB_REPO}:${DOCKER_TAG}"
            else
              echo "Not pushing to dockerhub for tag=${CIRCLE_TAG} branch=${CIRCLE_BRANCH}"
            fi

  docker-image-publish-prod:
    docker:
      - image: mozilla/cidockerbases:docker-latest
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - skip-if-do-not-deploy
      - setup_remote_docker
      - attach_workspace:
          at: workspace
      - dockerhub-login
      - run:
          name: Load Docker image from workspace
          command: docker load -i workspace/merino.tar.gz
      - run:
          name: Push to Docker Hub (prod)
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              DOCKER_TAG="prod-${CIRCLE_SHA1}"
            fi

            if [ -n "${DOCKER_TAG}" ]; then
              echo ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker tag app:runtime ${DOCKERHUB_REPO}:${DOCKER_TAG}
              docker images
              docker push "${DOCKERHUB_REPO}:${DOCKER_TAG}"
            else
              echo "Not pushing to dockerhub for tag=${CIRCLE_TAG} branch=${CIRCLE_BRANCH}"
            fi

  docs-build:
    docker:
      - image: cimg/rust:1.63
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - run:
          name: Setup Build docs
          command: |
            cargo install mdbook
      - run:
          name: Build docs
          command: |
            ./dev/make-all-docs.sh
            mkdir workspace
            cp -r ./book workspace/doc
      - persist_to_workspace:
          root: workspace
          paths:
            - doc

  docs-publish-github-pages:
    docker:
      - image: node
        auth:
          username: $DOCKER_USER
          password: $DOCKER_PASS
    steps:
      - checkout
      - attach_workspace:
          at: workspace
      - run:
          name: Disable jekyll builds
          command: touch workspace/doc/.nojekyll
      - add_ssh_keys:
          fingerprints:
            - "d7:41:54:5a:2e:e0:17:68:12:59:08:8e:7a:21:dc:cc"
      - run:
          name: Deploy docs to gh-pages
          command: |
            npx --yes gh-pages@3.0.0 \
              --user "ci-build <ci-build@merino.mozilla.org>" \
              --message "[skip ci] Docs updates" \
              --dist workspace/doc

commands:
  dockerhub-login:
    steps:
      - run:
          name: Login to Dockerhub
          command: |
            if [ "${DOCKER_USER}" == "" ] || [ "${DOCKER_PASS}" == "" ]; then
              echo "Skipping Login to DockerHub, credentials unavailable"
            else
              echo "${DOCKER_PASS}" | docker login -u="${DOCKER_USER}" --password-stdin
            fi

  setup-rust-check:
    steps:
      - run:
          name: Setup Rust Checks
          command: |
            cargo install cargo-audit

  rust-check:
    steps:
      - run:
          name: Rust Checks
          command: |
            cargo fmt -- --check
            cargo audit
            cargo clippy --all --all-targets --all-features -- -D warnings

  write-version:
    steps:
      - run:
          name: Create a version.json
          command: |
            # create a version.json per
            # https://github.com/mozilla-services/Dockerflow/blob/master/docs/version_object.md
            printf '{"commit":"%s","version":"%s","source":"https://github.com/%s/%s","build":"%s"}\n' \
            "$CIRCLE_SHA1" \
            "$CIRCLE_TAG" \
            "$CIRCLE_PROJECT_USERNAME" \
            "$CIRCLE_PROJECT_REPONAME" \
            "$CIRCLE_BUILD_URL" > version.json

  skip-if-do-not-deploy:
    steps:
      - run:
          name: Check if deployment is disallowed
          # This relies on the [do not deploy] text to be available in the
          # merge commit when merging the PR to 'main'.
          command: |
            if git log -1 "$CIRCLE_SHA1" | grep -q '\[do not deploy\]'; then
                echo "Skipping remaining steps in this job: deployment was disabled for this commit."
                circleci-agent step halt

                # No need to deploy, just cancel the rest of jobs of the workflow.
                # See API detail: https://circleci.com/docs/api/v2/index.html#operation/cancelWorkflow

                curl -X POST https://circleci.com/api/v2/workflow/${CIRCLE_WORKFLOW_ID}/cancel \
                -H 'Accept: application/json' \
                -H "Circle-Token: ${SKIP_DEPLOY_API_TOKEN}"
            fi
