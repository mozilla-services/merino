window.SIDEBAR_ITEMS = {"enum":[["Commit","Enum used to indicate if a parser committed any items of the stream it was given as an input."],["Info",""],["ParseResult","A `Result` type which has the committed status flattened into the result. Conversions to and from `std::result::Result` can be done using `result.into()` or `From::from(result)`"],["StringStreamError",""],["UnexpectedParse",""]],"struct":[["Format","Newtype which constructs an `Info::Format` through `ErrorInfo`"],["Range","Newtype which constructs an `Info::Range` through `ErrorInfo`"],["Static","Newtype which constructs an `Info::Static` through `ErrorInfo` A plain `&'static str` can also be used, this exists for consistency."],["Token","Newtype which constructs an `Info::Token` through `ErrorInfo`"],["Tracked","Error wrapper which lets parsers track which parser in a sequence of sub-parsers has emitted the error. `Tracked::from` can be used to construct this and it should otherwise be ignored outside of combine."]],"trait":[["ErrorInfo","Trait for types which can be used to construct error information."],["ParseError","Trait which defines a combine parse error."],["ParseErrorInto","Defines a conversion between two parse error types."],["StreamError","`StreamError` represents a single error returned from a `Stream` or a `Parser`."],["StreamErrorInto","Defines a conversion between two stream error types."]],"type":[["StdParseResult","A type alias over the specific `Result` type used by parsers to indicate whether they were successful or not. `O` is the type that is output on success. `Input` is the specific stream type used in the parser."],["StdParseResult2",""]]};