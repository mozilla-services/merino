[advisories]
ignore = [
    # Pre-release versions cause false positives in cargo-audit. See https://github.com/RustSec/rustsec-crate/issues/218
    "RUSTSEC-2018-0019", # False positive on actix-web. Affected versions are <0.7.15, we have 4.0.0-beta.5.
    "RUSTSEC-2020-0048", # False positive on actix-http. Affected versions are <2.0.0-alpha.1, we have 3.0.0-beta.5.
    "RUSTSEC-2020-0049", # False positive on actix-codec. Affected versions are <0.3.0-beta.1, we have 0.4.0-beta.1.

    # Both Sentry and actix pull in a specific version of the time crate. Unfortunately
    # these packages can't be updated as we are restricted by the server version.
    "RUSTSEC-2020-0071", # Time 0.143 - Potential segfault in time crate.

    # Hyper is only used for Remote Settings syncing currently, which only
    # works with trusted servers. These two problems are acceptable for now,
    # but we should try to update this soon.
    "RUSTSEC-2021-0078", # Hyper 0.13.10 - Lenient `hyper` header parsing of `Content-Length` could allow request smuggling
    "RUSTSEC-2021-0079", # Integer overflow in `hyper`'s parsing of the `Transfer-Encoding` header leads to data loss

    # sized-chunks is used by the crate im, pulled in by sentry-core. We can't
    # update the Sentry libraries to get out of this, until our server has
    # upgraded. I've reviewed the CVE, and don't believe it affects im's usage.
    "RUSTSEC-2020-0041",

    # While this is not a false positive, there is no recommended fix right
    # now for the chrono problem, hence the exception.
    "RUSTSEC-2020-0159", # Chrono 0.4.19 - Potential segfault in `localtime_r` invokations.

    # This  problems relates to using oneshot channels in certain versions
    # Tokio. For us that problematic version of Tokio is being pulled in by our
    # old Sentry library. We will need to upgrade that, which requires having
    # newer Sentry server, before we can fix this problem.
    "RUSTSEC-2021-0124",
]
